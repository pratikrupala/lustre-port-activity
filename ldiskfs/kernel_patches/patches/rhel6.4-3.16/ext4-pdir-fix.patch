--- linux-stage.orig/fs/ext4/ext4.h	2014-10-09 12:25:31.859426712 +0530
+++ linux-stage/fs/ext4/ext4.h	2014-10-09 12:35:00.589839991 +0530
@@ -819,6 +819,9 @@ struct ext4_inode_info {
 	__u32	i_dtime;
 	ext4_fsblk_t	i_file_acl;
 
+	/* following fields for parallel directory operations -bzzz */
+	struct semaphore i_append_sem;
+
 	/*
 	 * i_block_group is the number of the block group which contains
 	 * this file's inode.  Constant across the lifetime of the inode,
--- linux-stage.orig/fs/ext4/namei.c	2014-10-09 12:25:31.858426535 +0530
+++ linux-stage/fs/ext4/namei.c	2014-10-09 12:40:18.609940335 +0530
@@ -53,6 +53,7 @@ static struct buffer_head *ext4_append(h
 					ext4_lblk_t *block)
 {
 	struct buffer_head *bh;
+	struct ext4_inode_info *ei = EXT4_I(inode);
 	int err = 0;
 
 	if (unlikely(EXT4_SB(inode->i_sb)->s_max_dir_size_kb &&
@@ -60,15 +61,22 @@ static struct buffer_head *ext4_append(h
 		      EXT4_SB(inode->i_sb)->s_max_dir_size_kb)))
 		return ERR_PTR(-ENOSPC);
 
+	/* with parallel dir operations all appends
+	* have to be serialized -bzzz */
+	down(&ei->i_append_sem);
+
 	*block = inode->i_size >> inode->i_sb->s_blocksize_bits;
 
 	bh = ext4_bread(handle, inode, *block, 1, &err);
-	if (!bh)
+	if (!bh) {
+		up(&ei->i_append_sem);
 		return ERR_PTR(err);
+	}
 	inode->i_size += inode->i_sb->s_blocksize;
 	EXT4_I(inode)->i_disksize = inode->i_size;
 	BUFFER_TRACE(bh, "get_write_access");
 	err = ext4_journal_get_write_access(handle, bh);
+	up(&ei->i_append_sem);
 	if (err) {
 		brelse(bh);
 		ext4_std_error(inode->i_sb, err);
--- linux-stage.orig/fs/ext4/super.c	2014-10-09 12:25:31.859426712 +0530
+++ linux-stage/fs/ext4/super.c	2014-10-09 13:21:13.725387312 +0530
@@ -881,6 +881,7 @@ static struct inode *ext4_alloc_inode(st
 		return NULL;
 
 	ei->vfs_inode.i_version = 1;
+	sema_init(&ei->i_append_sem, 1);
 	spin_lock_init(&ei->i_raw_lock);
 	INIT_LIST_HEAD(&ei->i_prealloc_list);
 	spin_lock_init(&ei->i_prealloc_lock);
